// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.junit.After;
import static org.junit.Assert.*;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.core.IsNot.not;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.remote.RemoteWebDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.Dimension;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.Alert;
import org.openqa.selenium.Keys;
import java.util.*;
import java.net.MalformedURLException;
import java.net.URL;
public class RedditCatsTest {
  private WebDriver driver;
  private Map<String, Object> vars;
  JavascriptExecutor js;
  @Before
  public void setUp() {
    System.setProperty("webdriver.gecko.driver", "Firefox/geckodriver-win64.exe");
    System.setProperty("webdriver.firefox.logfile", "/dev/null");
    driver = new FirefoxDriver();
    js = (JavascriptExecutor) driver;
    vars = new HashMap<String, Object>();
    System.setProperty("webdriver.gecko.driver", "Firefox/geckodriver-win64.exe");
    System.setProperty("webdriver.firefox.logfile", "/dev/null");

  }
  @After
  public void tearDown() {
    driver.quit();
  }
  @Test
  public void fUNRULES10ITEMS() {
    // Test name: FUN-RULES-10-ITEMS
    // Step # | name | target | value
    // 1 | open | https://www.reddit.com/r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1004x680 | 
    driver.manage().window().setSize(new Dimension(1004, 680));
    // 3 | assertElementPresent | xpath=//div[10]/div/div[2]/div | 
    {
      List<WebElement> elements = driver.findElements(By.xpath("//div[10]/div/div[2]/div"));
      assert(elements.size() > 0);
    }
    // 4 | assertElementNotPresent | xpath=//div[11]/div/div[2]/div | 
    {
      List<WebElement> elements = driver.findElements(By.xpath("//div[11]/div/div[2]/div"));
      assert(elements.size() == 0);
    }
  }
  @Test
  public void fUNJOINBUTTONEXISTS() {
    // Test name: FUN-JOIN-BUTTON-EXISTS
    // Step # | name | target | value
    // 1 | open | https://www.reddit.com/r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1004x680 | 
    driver.manage().window().setSize(new Dimension(1004, 680));
    // 3 | assertText | xpath=//div[2]/div/div/div/div/div[2]/button | Join
    assertThat(driver.findElement(By.xpath("//div[2]/div/div/div/div/div[2]/button")).getText(), is("Join"));
  }
  @Test
  public void fUNRULE3() {
    // Test name: FUN-RULE-3
    // Step # | name | target | value
    // 1 | open | https://www.reddit.com/r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1280x800 | 
    driver.manage().window().setSize(new Dimension(1280, 800));
    // 3 | assertText | xpath=//div[@id='SHORTCUT_FOCUSABLE_DIV']/div[2]/div/div/div/div[2]/div[3]/div[2]/div/div[4]/div/div[2]/div[3]/div/div[2]/div | No NSFW, animal abuse, or cruelty
    assertThat(driver.findElement(By.xpath("//div[@id=\'SHORTCUT_FOCUSABLE_DIV\']/div[2]/div/div/div/div[2]/div[3]/div[2]/div/div[4]/div/div[2]/div[3]/div/div[2]/div")).getText(), is("No NSFW, animal abuse, or cruelty"));
  }
  @Test
  public void fUNSEARCHSMELLYCAT() {
    // Test name: FUN-SEARCH-SMELLY-CAT
    // Step # | name | target | value
    // 1 | open | https://www.reddit.com/r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | type | id=header-search-bar | smelly cat
    driver.findElement(By.id("header-search-bar")).sendKeys("smelly cat");
    // 3 | sendKeys | id=header-search-bar | ${KEY_ENTER}
    driver.findElement(By.id("header-search-bar")).sendKeys(Keys.ENTER);
    // 4 | assertText | xpath=//h3 | smelly cat
    boolean x =driver.findElement(By.xpath("//h3")).getText().contains("smelly cat"); 
    assertTrue(x);
  }
  @Test
  public void fUNSIGNUPLINK() {
    // Test name: FUN-SIGNUP-LINK
    // Step # | name | target | value
    // 1 | open | https://www.reddit.com/r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | storeAttribute | linkText=Sign Up@href | url
    {
      WebElement element = driver.findElement(By.linkText("Sign Up"));
      String attribute = element.getAttribute("href");
      vars.put("url", attribute);
    }
    // 3 | assert | url | https://www.reddit.com/register/?dest=https%3A%2F%2Fwww.reddit.com%2Fr%2Fcats%2F
    assertEquals(vars.get("url").toString(), "https://www.reddit.com/register/?dest=https%3A%2F%2Fwww.reddit.com%2Fr%2Fcats%2F");
  }
  @Test
  public void fUNTITLE() {
    // Test name: FUN-TITLE
    // Step # | name | target | value
    // 1 | open | https://www.reddit.com/r/cats/ | 
    driver.get("https://www.reddit.com/r/cats/");
    // 2 | setWindowSize | 1004x680 | 
    driver.manage().window().setSize(new Dimension(1004, 680));
    // 3 | assertTitle | Cats | 
    assertThat(driver.getTitle(), is("Cats"));
  }
}
